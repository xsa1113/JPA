# 엔티티 매니저 설정

---

## 엔티티 매니저 팩토리

---

```xml
<?xml version="1.0" encoding="UTF-8"?>
<persistence version="2.2"
             xmlns="http://xmlns.jcp.org/xml/ns/persistence" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence http://xmlns.jcp.org/xml/ns/persistence/persistence_2_2.xsd">
    <persistence-unit name="hello">
// name과
```

```xml
<?EntityManagerFactory emf = Persistence.createEntityManagerFactory("hello");

// 위 글 name과 엔티티 매니저 팩토리 이름과 동일하게 만들어야 한다.
```

## 앤티티 매니저

`EntityManagerFactory`를 가상의 DB로 생각

**`EntityManagerFactory`는 스레드간에 공유하거나 재사용하면 안된다**

종료

```xml
em.close();
```

사용이 끝난 엔티티 매니저는 종료 

종료하지 않을 경우 해당 커넥션을 낭비, 성능 저하

```xml
emf.close();
```

`EntityManagerFactory` 는 어플리케이션이 끝날때 종료

# 트랜잭션 관리

---

JPA 사용 시 항상 트랜잭션 안에서 데이터를 변경해야 한다. 

트랜잭션 없이 데이터를 변경하면 예외를 발생시키기도 한다.

```java

EntityManagerFactory emf = Persistence.createEntityManagerFactory("hello");
EntityManager em = emf.createEntityManager();
EntityTransaction tx = em.getTransaction();

tx.begin();
try{
            Member findMember = em.find(Member.class, 1L);
            findMember.setName("HelloJPA");

            tx.commit();
        }catch(Exception e){

            tx.rollback();
        }finally {

            em.close();
        }
```

트랜잭션을 시작하기 위해 `엔티티 매니저`를 활용해서 진행한다. `트랜잭션 API`를 받아오고 `begin()`을 활용해 시작하고 `commit()`을 통해 반영 시킨다. 

에러 발생시에 `rollback()`을 통해 이전 상태로 되돌린다.

## 등록

```java
em.persist(obejct);
```

`persist()` 메서드에 저장할 엔티티를 넘겨준다. 

## 조회

```java
Object object = em.find(Object.class, id);
```

조회를 위해서는 `find()`에 알맞은 인자값을 넣는다.

## 삭제

```java
em.remove(object)
```

`remove()` 메서드에 삭제할 인스턴스를 넘겨준다. 

## 수정

```java
Object object = em.find(Object.class, id);
object.setName("예제");
```

기존을 찾고, 이에 맞는 걸 `setName()`을 활용해서 변경한다
